{"version":3,"sources":["components/gif-expert-app/GifAddCategory.js","components/gif-expert-app/GifGridItem.js","helpers/ApiGetGifs.js","config/config.js","components/gif-expert-app/GifGrid.js","hooks/useFetchGifs.js","components/gif-expert-app/GifExpertApp.js","index.js"],"names":["GifAddCategory","setcategories","useState","inputValue","setInputValue","onSubmit","e","preventDefault","catg","includes","type","value","onChange","target","placeholder","GifGridItem","title","url","className","src","alt","getGifs","category","a","encodeURI","fetch","resp","json","data","gifs","map","id","images","downsized_large","GifGrid","delay","loading","state","setState","useEffect","then","setTimeout","useFetchGifs","img","GifExpertApp","categories","ReactDOM","render","document","getElementById"],"mappings":"mPA+BeA,EA5BQ,SAAC,GAAqB,IAApBC,EAAmB,EAAnBA,cAAmB,EACNC,mBAAS,IADH,mBACnCC,EADmC,KACvBC,EADuB,KAiB1C,OACE,sBAAMC,SAXa,SAACC,GACpBA,EAAEC,iBACGJ,IACLF,GAAc,SAACO,GACb,OAAIA,EAAKC,SAASN,GAAoBK,EAChC,CAAEL,GAAR,mBAAuBK,OAEzBJ,EAAc,MAId,SACE,uBAAOM,KAAK,OAAOC,MAAOR,EAAYS,SAhBhB,SAACN,GACzBF,EAAcE,EAAEO,OAAOF,QAe8CG,YAAY,yB,QCHtEC,G,MAbK,SAAC,GAAkB,IAAjBC,EAAgB,EAAhBA,MAAOC,EAAS,EAATA,IAC3B,OACE,0BAASC,UAAU,8CAAnB,UACE,8BACE,qBAAKC,IAAKF,EAAKG,IAAKJ,MAEtB,4BAAIA,S,uBCVGK,EAAO,uCAAG,WAAOC,GAAP,uBAAAC,EAAA,6DACfN,EADe,gDACgCO,UAAUF,GAD1C,UAC6D,GAD7D,oBCFA,oCDEA,SAEFG,MAAMR,GAFJ,cAEfS,EAFe,gBAGAA,EAAKC,OAHL,uBAGdC,EAHc,EAGdA,KACDC,EAAOD,EAAKE,KAAI,kBAAoD,CAACC,GAArD,EAAEA,GAAuDf,MAAzD,EAAMA,MAA0DC,IAAhE,EAAae,OAASC,gBAAkBhB,QAJzC,kBAMdY,GANc,4CAAH,sDE8BLK,G,MAvBC,SAAC,GAAgB,IAAfZ,EAAc,EAAdA,SAAc,ECNJ,SAACA,GAAyB,IAAfa,EAAc,uDAAN,EAAM,EACzBjC,mBAAS,CACjC0B,KAAM,GACNQ,SAAS,IAHwC,mBAC5CC,EAD4C,KACrCC,EADqC,KAcnD,OARAC,qBAAU,WACRlB,EAAQC,GAAUkB,MAAK,SAACZ,GAAD,OACrBa,YAAW,WACTH,EAAS,CAACV,OAAMQ,SAAS,MACxBD,QAEJ,CAACb,EAAUa,IAEPE,EDPyBK,CAAapB,GAAhCU,EADiB,EACvBJ,KAAcQ,EADS,EACTA,QAErB,OACE,0BAASlB,UAAU,MAAnB,UACE,yBAASA,UAAU,yDAAnB,SACE,6BAAKI,MAGNc,GAAW,mBAAGlB,UAAU,mCAAb,8BACZ,yBAASA,UAAU,WAAnB,SACGc,EAAOF,KAAI,SAACa,GAAD,OACV,cAAC,EAAD,eAA8BA,GAAZA,EAAIZ,cEDjBa,EAhBM,WAAO,IAAD,EACW1C,mBAAS,CAAC,cADrB,mBAClB2C,EADkB,KACN5C,EADM,KAGzB,OACE,qCACE,cAAC,EAAD,CAAgBA,cAAeA,IAC/B,uBACA,8BACG4C,EAAWf,KAAI,SAACR,GAAD,OACd,cAAC,EAAD,CAAwBA,SAAUA,GAApBA,Y,YCNxBwB,IAASC,OACP,cAAC,WAAD,UACE,cAAC,EAAD,MAEFC,SAASC,eAAe,W","file":"static/js/main.88e6701d.chunk.js","sourcesContent":["import React, {useState} from 'react';\nimport PropTypes from 'prop-types';\n\nconst GifAddCategory = ({setcategories}) => {\n  const [inputValue, setInputValue] = useState('');\n\n  const handleInputChange = (e) => {\n    setInputValue(e.target.value);\n  };\n\n  const handleSubmit = (e) => {\n    e.preventDefault();\n    if (!inputValue) return;\n    setcategories((catg) => {\n      if (catg.includes(inputValue)) return catg;\n      return [inputValue, ...catg];\n    });\n    setInputValue('');\n  };\n\n  return (\n    <form onSubmit={handleSubmit}>\n      <input type=\"text\" value={inputValue} onChange={handleInputChange} placeholder=\"Valor por defecto\" />\n    </form>\n  );\n};\n\nGifAddCategory.propTypes = {\n  setcategories: PropTypes.func.isRequired,\n};\n\nexport default GifAddCategory;\n","import React from 'react';\n// import PropTypes from 'prop-types';\n\nimport './gifgriditem.css';\n\n// const GifGridItem = ({id, title, small, medium, large}) => {\nconst GifGridItem = ({title, url}) => {\n  return (\n    <section className=\"grid-item animate__animated animate__fadeIn\">\n      <div>\n        <img src={url} alt={title} />\n      </div>\n      <p>{title}</p>\n    </section>\n  );\n};\n\n// GifGridItem.propTypes = {};\n\nexport default GifGridItem;\n","import {api_key} from '../config/config';\n\nexport const getGifs = async (category) => {\n  const url = `http://api.giphy.com/v1/gifs/search?q=${encodeURI(category)}&limit=${10}&api_key=${api_key}`;\n  const resp = await fetch(url);\n  const {data} = await resp.json();\n  const gifs = data.map(({id, title, images: {downsized_large: {url}}}) => ({id, title, url}));\n  // console.log(gifs);\n  return gifs;\n};\n","export const api_key = 'rkEjzeb6bqXN90eJS8gFpMOEUwhqT52n';\n","import React from 'react';\nimport PropTypes from 'prop-types';\n\nimport GifGridItem from './GifGridItem';\n\nimport {useFetchGifs} from '../../hooks/useFetchGifs';\n\nimport './gifgridapp.css';\n\nconst GifGrid = ({category}) => {\n  const {data: images, loading} = useFetchGifs(category);\n\n  return (\n    <section className=\"gif\">\n      <section className=\"gif-title animate__animated animate__lightSpeedInRight\">\n        <h4>{category}</h4>\n      </section>\n\n      {loading && <p className=\"animate__animated animate__flash\">Cargando data...</p>}\n      <section className=\"gif-grid\">\n        {images.map((img) => (\n          <GifGridItem key={img.id} {...img} />\n        ))}\n      </section>\n    </section>\n  );\n};\n\nGifGrid.propTypes = {\n  category: PropTypes.string.isRequired,\n};\n\nexport default GifGrid;\n","import {useEffect, useState} from 'react';\nimport {getGifs} from '../helpers/ApiGetGifs';\n\nexport const useFetchGifs = (category, delay = 0) => {\n  const [state, setState] = useState({\n    data: [],\n    loading: true,\n  });\n\n  useEffect(() => {\n    getGifs(category).then((data) =>\n      setTimeout(() => {\n        setState({data, loading: false});\n      }, delay)\n    );\n  }, [category, delay]);\n\n  return state;\n};\n","import React, {useState} from 'react';\nimport GifAddCategory from './GifAddCategory';\nimport GifGrid from './GifGrid';\n\nconst GifExpertApp = () => {\n  const [categories, setcategories] = useState(['Samurai X']);\n\n  return (\n    <>\n      <GifAddCategory setcategories={setcategories} />\n      <hr />\n      <div>\n        {categories.map((category) => (\n          <GifGrid key={category} category={category} />\n        ))}\n      </div>\n    </>\n  );\n};\n\nexport default GifExpertApp;\n","import React, {Fragment} from 'react';\nimport ReactDOM from 'react-dom';\nimport GifExpertApp from './components/gif-expert-app/GifExpertApp';\n\nimport 'animate.css';\nimport './index.css';\n\nReactDOM.render(\n  <Fragment>\n    <GifExpertApp />\n  </Fragment>,\n  document.getElementById('root')\n);\n"],"sourceRoot":""}